/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_mucop;

import static java.awt.SystemColor.window;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author florentcardoen
 */
public class MainFrame extends javax.swing.JFrame {
    private LoginFrame lf;
    private String user;
    private InetAddress addUDP;
    private Integer portUDP;
    private ArrayList<message> messageList;
    private MulticastSocket multisock; 
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        messageList =  new ArrayList<>();

        DefaultListModel lm = new DefaultListModel();
        lm.addElement("Tous");
        lm.addElement("Infos");
        ecritureTextaArea.addKeyListener(new KeyListener(){
            @Override
            public void keyPressed(KeyEvent e){
                if(e.getKeyCode() == KeyEvent.VK_ENTER && enterCheck.isSelected()){
                    e.consume();
                    envoyerButton.doClick();
                }
            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }

           
        });
        subjectList.setModel(lm);
        subjectList.setSelectedIndex(0);
        lf = new LoginFrame(this);
        lf.setVisible(true);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        erreurEnvoisLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectList = new javax.swing.JList();
        filtreLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        ecritureTextaArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        enterCheck = new javax.swing.JCheckBox();
        typeMessageCombo = new javax.swing.JComboBox();
        envoyerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        erreurEnvoisLabel.setForeground(new java.awt.Color(255, 0, 0));

        subjectList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Tous", "Infos" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        subjectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                subjectListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(subjectList);

        filtreLabel.setText("Sujets");

        displayTextArea.setEditable(false);
        displayTextArea.setColumns(20);
        displayTextArea.setLineWrap(true);
        displayTextArea.setRows(5);
        jScrollPane2.setViewportView(displayTextArea);

        ecritureTextaArea.setColumns(20);
        ecritureTextaArea.setLineWrap(true);
        ecritureTextaArea.setRows(5);
        jScrollPane3.setViewportView(ecritureTextaArea);

        enterCheck.setSelected(true);
        enterCheck.setText("Enter envoyer");

        typeMessageCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Info", "Nouvelle question", "RÃ©pondre" }));

        envoyerButton.setText("Envoyer");
        envoyerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envoyerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(enterCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(typeMessageCombo, 0, 154, Short.MAX_VALUE)
                    .addComponent(envoyerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(enterCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeMessageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(envoyerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(erreurEnvoisLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filtreLabel))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filtreLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erreurEnvoisLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subjectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_subjectListValueChanged

        if(messageList ==  null || subjectList.getValueIsAdjusting())
            return;
        
        if(subjectList.getSelectedValue().toString().matches("^Q(.*)"))
            typeMessageCombo.setSelectedIndex(2);
        else
            typeMessageCombo.setSelectedIndex(0);
        
        displayTextArea.setText("");
        for(message m : messageList)
        {
            if(m.getTag().equals(subjectList.getSelectedValue()) || subjectList.getSelectedValue().equals("Tous"))
                displayTextArea.append(m.getMessage() + "\n");
            
        }
    }//GEN-LAST:event_subjectListValueChanged

    private void envoyerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerButtonActionPerformed

        if(ecritureTextaArea.getText().isEmpty()) // barriÃ¨re anti spam
        return;


        //Creation du tag pour le message
        String tag = "Infos";
        int digest = -1;
        if(typeMessageCombo.getSelectedIndex() == 2) // si on a sÃ©lectionner rÃ©pondre
        {
            //On verifie qu'on a bien selectionne une question pour repondre
            if(subjectList.getSelectedIndex() == 0 || subjectList.getSelectedIndex() == 1)
            {
                setError("Pour rÃ©pondre Ã  une question, vous devez en choisir une dans liste des questions");

                return;
            }
            tag = "R"+subjectList.getSelectedValue().toString();
        }
        else if(typeMessageCombo.getSelectedIndex() == 1)// on gÃ©nÃ¨re un tag pour la nouvelle question
        {
            boolean idIsUsed = true;

            while(idIsUsed)
            {
                idIsUsed =  false;
                Random rand = new Random();
                tag = "Q"+rand.nextInt(99999);

                for(int i = 2; i < subjectList.getModel().getSize(); i++)//on verifie qu'une autre question n'est pas ouverte Ã  ce tag
                if(subjectList.getModel().getElementAt(i).equals(tag))
                idIsUsed = true;
            }
            //On construit un digest sur la question
            digest = hashFunction(ecritureTextaArea.getText());
        }

        String message;
        if(digest == -1)
        message = user +"#"+tag+"#"+ecritureTextaArea.getText().replaceAll("#", "");//message sans digest
        else
        message = user +"#"+tag+"#"+ecritureTextaArea.getText().replaceAll("#", "") +"#"+digest; //message + digest

        //On transforme le message en byte pour l'envoyer dans le datagramme
        byte[] buff;
        buff = message.getBytes();

        DatagramPacket paquet = new DatagramPacket(buff, buff.length, addUDP, portUDP);
        try {
            multisock.send(paquet);
        } catch (IOException ex) {
            System.err.println("Erreur d'envois de message. Client chat ligne 284 " + ex);
        }
        ecritureTextaArea.setText(""); // on vide la textArea.
    }//GEN-LAST:event_envoyerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public void setError(String err)
    {
        erreurEnvoisLabel.setText(err);
        int delay = 5000; //milliseconds
        Timer t = new Timer(delay, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                erreurEnvoisLabel.setText("");
            }
        });
        t.setRepeats(false);
        t.start();
    }
    public void setAdresse(String add)
    {
        try {
            addUDP = InetAddress.getByName(add);
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void setPort(String p)
    {
        portUDP = Integer.parseInt(p);
    }
    public void isLogged()
    {
        lf.dispose();
        
        this.setVisible(true);
        MacFullScreen.setupDisplay(this, false);
        createMultiCast();

    }
    public int hashFunction(String message)
    {
        int hashValue = 0;
        
        for(int i = 0; i < message.length(); i++)
            hashValue += (int)message.charAt(i);
        
        return hashValue%67;
    }    
    private  void createMultiCast()
    {
       try {

            multisock = new MulticastSocket(portUDP);
            multisock.setBroadcast(true);
            multisock.joinGroup(addUDP);
            System.out.println("ok");
            ThreadReception thr =  new ThreadReception(multisock, messageList, this);
            thr.start();
            //Pour forcer l'interface Ã  utiliser
            //udp_sock.setNetworkInterface(NetworkInterface.getBy...);
        } catch (UnknownHostException ex) {
            System.err.println("Erreur d'ouverture de la socket UDP " + ex);
        } catch (IOException ex) {
            System.err.println("Erreur d'ouverture de la socket UDP " + ex);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.setProperty("java.net.preferIPv4Stack", "true");
                new MainFrame();
            }
        });
    }

 
    public void refreshDisplay()
    {
        message messageEntrant = messageList.get(messageList.size()-1);
        
        boolean newSubject = true;
        for(int i =0; i < subjectList.getModel().getSize(); i++)
        {
            if(subjectList.getModel().getElementAt(i).equals(messageEntrant.getTag()))
            {
                newSubject = false;
                break;
            }
        }
        
        if(newSubject)
        {
            DefaultListModel lm = (DefaultListModel) subjectList.getModel();
            lm.addElement(messageEntrant.getTag());
        }
        
        //On ecrit les bons messages
        if(subjectList.getSelectedValue().equals("Tous") || subjectList.getSelectedValue().equals(messageEntrant.getTag()))
            displayTextArea.append(messageEntrant.getMessage()+"\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JTextArea ecritureTextaArea;
    private javax.swing.JCheckBox enterCheck;
    private javax.swing.JButton envoyerButton;
    private javax.swing.JLabel erreurEnvoisLabel;
    private javax.swing.JLabel filtreLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList subjectList;
    private javax.swing.JComboBox typeMessageCombo;
    // End of variables declaration//GEN-END:variables

    void setUser(String login) {
        user = login;
        this.setTitle("["+user+"]");
    }
}
