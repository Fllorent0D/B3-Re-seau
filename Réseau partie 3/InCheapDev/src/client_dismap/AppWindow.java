/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client_dismap;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import server.Message;
import models.Reservation;
import models.TypeAppareil;
import models.TypePrecis;
import javax.swing.JOptionPane;

/**
 *
 * @author bastin
 */
public final class AppWindow extends javax.swing.JFrame {

    private ClientDISMAP client = null;
    private ArrayList<Reservation> reservationsClient, reservationsSeller;
    
    /**
     * Creates new form AppWindow
     * @param c
     */
    public AppWindow() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Application Appareils");
        
        try {
            client = new ClientDISMAP();
            client.connect();
        } catch (UnknownHostException ex) { 
            Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        new AuthentificationWindow(client, true).setVisible(true);  
        
        new ServerUrgence(this).start();
         
        reservationsSeller = new ArrayList();
        
        ResultTypesTable.setModel(new DefaultTableModel(new String[]{"Numero de série", "Libelle", "Prix de vente", "Marque" ,"Disponible"}, 0));
        BasketClientTable.setModel(new DefaultTableModel(new String[]{"Libelle", "Marque", "Prix", "Quantité", "Total"}, 0));

        populateGoods();
        populateClients();
        
        refreshSearch();

        new NotificationSeller().start();
    }
    
    public void populateGoods() {
        ArrayList<TypePrecis> typesPrecis = client.listTypePrecis();
        
        TypePrecis tp = new TypePrecis();
        tp.setIdTypePrecis(0);
        tp.setType("Tous les types d'appareil");
        
        typesPrecis.add(0, tp);
        
        SearchComboBox.setModel(new DefaultComboBoxModel(new Vector(typesPrecis))); 
    }
    
    public void populateClients() {
        ArrayList<models.Client> clients = client.listClients();
        
        models.Client cl = new models.Client();
        cl.setId(0);
        cl.setNom("Sélectionnez un client");
        cl.setPrenom("");
        
        clients.add(0, cl);
        
        ClientsComboBox.setModel(new DefaultComboBoxModel(new Vector(clients)));         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        SearchComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultTypesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        BasketClientTable = new javax.swing.JTable();
        TypeAppareilTextField = new javax.swing.JTextField();
        QuantityTextField = new javax.swing.JTextField();
        addToBascketButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ClientsComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        goToPaymentButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ListSalesMenuItem = new javax.swing.JMenuItem();
        DisconnetMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText("Rechercher un article");

        jLabel2.setText("Catégorie : ");

        SearchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchComboBoxActionPerformed(evt);
            }
        });

        ResultTypesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(ResultTypesTable);

        BasketClientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(BasketClientTable);

        addToBascketButton.setText("Ajouter au panier");
        addToBascketButton.setEnabled(false);
        addToBascketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBascketButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Type de l'appareil : ");

        jLabel5.setText("Quantité : ");

        ClientsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Sélectionnez le panier d'un client : ");

        goToPaymentButton.setText("Passer au paiement");
        goToPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToPaymentButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setText("Panier d'un client");

        jMenu1.setText("Fichier");

        ListSalesMenuItem.setText("Liste des ventes");
        ListSalesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListSalesMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ListSalesMenuItem);

        DisconnetMenuItem.setText("Déconnexion");
        DisconnetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnetMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(DisconnetMenuItem);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(SearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6))
                    .addComponent(TypeAppareilTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(ClientsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(125, 125, 125)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(QuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(addToBascketButton)))))
                    .addComponent(goToPaymentButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TypeAppareilTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addToBascketButton)
                            .addComponent(QuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(goToPaymentButton)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchComboBoxActionPerformed
        refreshSearch();
    }//GEN-LAST:event_SearchComboBoxActionPerformed

    private void refreshSearch() {
        TypePrecis selectedItem = (TypePrecis) SearchComboBox.getSelectedItem();
        
        DefaultTableModel dtm = (DefaultTableModel) ResultTypesTable.getModel();

        dtm.setRowCount(0);
        
        if(selectedItem.getIdTypePrecis() != -1)
        {
            Message response = client.searchGoods(selectedItem.getIdTypePrecis());
            
            if(response.hasParam("error"))
                JOptionPane.showMessageDialog(this, response.getParam("error"));
            else
            {
                ArrayList<TypeAppareil> data = (ArrayList) response.getParam("data");

                data.forEach((row) -> {
                    dtm.addRow(new Object[]{row.getIdTypeAppareil(), row.getLibelle(), row.getPrixVenteBase(), row.getMarque(), String.valueOf(row.getAvailable())});
                });
            }   
        }
    }
    
    private void addToBascketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBascketButtonActionPerformed
        int idTypeAppareil = Integer.parseInt(TypeAppareilTextField.getText());
        int quantity = Integer.valueOf(QuantityTextField.getText());
        
        if(client == null)
        {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un client");
            return;
        }
        
        if(idTypeAppareil == 0 || quantity == 0)
        {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un type d'appareil et une quantité");
            return;
        }
        
        else
        {
            Message response = client.takeGoods(idTypeAppareil, quantity);
            
            if(response.hasParam("error"))
            {
                JOptionPane.showMessageDialog(this, response.getParam("error"));
            }
            else
            {
                refreshSearch();
                refreshBasket();
            }  
        } 
        
        TypeAppareilTextField.setText("");
        QuantityTextField.setText("");
    }//GEN-LAST:event_addToBascketButtonActionPerformed

    private void ClientsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsComboBoxActionPerformed
        models.Client cl = (models.Client) ClientsComboBox.getSelectedItem();
        
        client.setClient(cl);
        
        if(client.getClient().getId() != -1)   
            addToBascketButton.setEnabled(true);
        else
            addToBascketButton.setEnabled(false);
            
        refreshBasket();
    }//GEN-LAST:event_ClientsComboBoxActionPerformed

    private void goToPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToPaymentButtonActionPerformed
        
        if(client.getClient() != null && client.getClient().getId() != -1)
        {
            int sum = client.sumBasket(client.getClient().getId());
            
            PaymentWindow pw = new PaymentWindow(client, sum);
            pw.setVisible(true);
            
            System.out.println(pw.isOrderPaid());
            
            if(pw.isOrderPaid())
            {
                addReservationsToSeller();
                refreshBasket();
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un client");
    }//GEN-LAST:event_goToPaymentButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Fermeture du client");
        client.close();
    }//GEN-LAST:event_formWindowClosing

    private void DisconnetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnetMenuItemActionPerformed
        new AuthentificationWindow(client, false).setVisible(true);
    }//GEN-LAST:event_DisconnetMenuItemActionPerformed

    private void ListSalesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListSalesMenuItemActionPerformed
        new ListSalesWindow(this, reservationsSeller).setVisible(true);
    }//GEN-LAST:event_ListSalesMenuItemActionPerformed

    public void refreshBasket() {
        
        DefaultTableModel dtm = (DefaultTableModel) BasketClientTable.getModel();
        dtm.setRowCount(0);
        
        if(client != null && client.getClient().getId() != -1)
        {
            ArrayList<Reservation> data = client.listItemsBasket();

            data.forEach((row) -> {
                float prixFloat = row.getAppareil().getTypeAppareil().getPrixVenteBase();
                
                String libelle = row.getAppareil().getTypeAppareil().getLibelle();
                String marque = row.getAppareil().getTypeAppareil().getMarque();
                String prix = String.valueOf(prixFloat) + " €";
                String quantity = String.valueOf(row.getQuantity());
                String total = String.valueOf(row.getQuantity() * prixFloat) + " €";

                dtm.addRow(new Object[]{libelle, marque, prix, quantity, total});
            }); 
            
            reservationsClient = data;
        }
    }
    
    public void addReservationsToSeller() {
        for(Reservation r : reservationsClient) {
            reservationsSeller.add(r);
        }
        
        reservationsClient = null;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Material".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AuthentificationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AuthentificationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AuthentificationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AuthentificationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BasketClientTable;
    private javax.swing.JComboBox<String> ClientsComboBox;
    private javax.swing.JMenuItem DisconnetMenuItem;
    private javax.swing.JMenuItem ListSalesMenuItem;
    private javax.swing.JTextField QuantityTextField;
    private javax.swing.JTable ResultTypesTable;
    private javax.swing.JComboBox<String> SearchComboBox;
    private javax.swing.JTextField TypeAppareilTextField;
    private javax.swing.JButton addToBascketButton;
    private javax.swing.JButton goToPaymentButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
